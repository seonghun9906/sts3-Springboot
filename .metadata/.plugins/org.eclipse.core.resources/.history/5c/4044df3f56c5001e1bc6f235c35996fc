DB 관련 설정 -> root-context.xml
1) DataSource (DB)
	- 드라이버 클래스
	- DB까지의 경로(URL)
	- DB 게정 이름
	- DB 게정 비밀번호
2) SqlSessionFactory (MyBatis)
	MyBatis를 위한 클래스(인터페이스) scanning
3) Transaction 관련

Java package
1) service - Service 클래스를 작성
2) dao - DAO 인터페이스
3) dto - DTO 클래스를 작성
4) util - 기타 도구 관련 클래스(paging 처리 등)


Spring Framework의 components
	Spring이 관리하는 대상 객체.
	IoC로 처리하는 DI의 대상.
	
component는 어노테이션으로 처리
1) @Component - 컨트롤러와 서비스를 제외한 대상 객체
2) @Controller - 제어용 객체
3) @Service - 기능 처리용 객체

Job(잡) - 요청 처리 프로세스
View <-> Controller <-> Service <-> Dao <-> DB

Class와 Interface
	메서드 = 선언부 + 정의부 -> 클래스 => 인스턴스 생성 후 사용
	메서드 선언부 -> 인터페이스 =/=> 인스턴스 생성이 불가 
	
	추상화(Abstract) - 개념을 정의한다.

DAO를 사용하는 클래스는 Service 클래스.
MyBatis로 처리되는 인스턴스는 스프링 프레임워크에 등록된다.
(즉, 컴포넌트와 같다 -> DI를 자동으로 처리)

@Autowired 어노테이션
컴포넌트 인스턴스를 자동으로 주입 또는 수거하도록 지정하는 어노테이션.

페이징(페이지네이션. Pagination) 처리
	전체 컨텐츠를 여러 페이지로 나누어 페이지 번호를 부여하거나, '이전', '다음' 버튼으로 이동.
	MySQL의 limit을 활용.
	
	전체 페이지 개수 = 전체 컨텐츠 / 페이지 당 보여질 컨텐츠 개수
		이 때, 나머지가 0이 아닐 경우 1페이지 추가
		
	페이지 번호(버튼)은 <a> 태그를 활용.
	
StringBuffer 객체
	문자열 처리를 위한 공간을 제공하는 객체.
	문자열을 붙이거나 자르거나 등의 수정이 많은 경우 활용하는 객체.
	
Session
	클라이언트가 서버에 접속하게 되면 각 클라이언트별로 할당되는 공간.
	(일종의 클라이언트와 서버 간의 통로를 나타내는 말인데. 메모리를 사용하기 때문에 공간이라고 표현합니다.) 
	
	인터넷의 통신 메커니즘 : Best Effort 방식.
		3 handshaking 방식
		클라이언트 요청 -> 서버 읍답 -> 클라이언트 데이터 전송